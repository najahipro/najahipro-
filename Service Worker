// najahipro Service Worker
const CACHE_NAME = 'najahipro-v1.0.0';
const STATIC_CACHE = 'najahipro-static-v1';
const DYNAMIC_CACHE = 'najahipro-dynamic-v1';

// الملفات المهمة باش تتحفظ فالكاش
const STATIC_ASSETS = [
  '/',
  '/index.html',
  '/style.css',
  '/scripts1.js',
  '/manifest.json',
  'https://fonts.googleapis.com/css2?family=Cairo:wght@300;400;600;700&display=swap',
  'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css'
];

// تثبيت Service Worker
self.addEventListener('install', event => {
  console.log('🚀 najahipro SW installing...');
  
  event.waitUntil(
    caches.open(STATIC_CACHE)
      .then(cache => {
        console.log('📦 Caching static assets...');
        return cache.addAll(STATIC_ASSETS);
      })
      .then(() => {
        console.log('✅ Static assets cached successfully');
        return self.skipWaiting();
      })
      .catch(error => {
        console.error('❌ Error caching static assets:', error);
      })
  );
});

// تفعيل Service Worker
self.addEventListener('activate', event => {
  console.log('🔄 najahipro SW activating...');
  
  event.waitUntil(
    caches.keys()
      .then(cacheNames => {
        return Promise.all(
          cacheNames.map(cacheName => {
            // حذف الكاش القديم
            if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
              console.log('🗑️ Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log('✅ SW activated and old caches cleaned');
        return self.clients.claim();
      })
  );
});

// التعامل مع الطلبات
self.addEventListener('fetch', event => {
  const { request } = event;
  
  // تجاهل الطلبات الخارجية والـ POST requests
  if (!request.url.startsWith(self.location.origin) || request.method !== 'GET') {
    return;
  }

  event.respondWith(
    caches.match(request)
      .then(cachedResponse => {
        if (cachedResponse) {
          console.log('📦 Serving from cache:', request.url);
          return cachedResponse;
        }

        // إلا ما كانش فالكاش، جيبو من النت
        return fetch(request)
          .then(response => {
            // تأكد أن الاستجابة صحيحة
            if (!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }

            // حفظ النسخة فالكاش الديناميكي
            const responseToCache = response.clone();
            
            caches.open(DYNAMIC_CACHE)
              .then(cache => {
                cache.put(request, responseToCache);
                console.log('💾 Cached dynamically:', request.url);
              });

            return response;
          })
          .catch(error => {
            console.log('❌ Fetch failed, serving offline page:', error);
            
            // إلا كان طلب HTML وما خدمش، رد offline page
            if (request.destination === 'document') {
              return caches.match('/');
            }
            
            // للصور والملفات الأخرى، ارجع placeholder
            if (request.destination === 'image') {
              return new Response('', { status: 200 });
            }
            
            return new Response('Offline', { 
              status: 503,
              statusText: 'Service Unavailable' 
            });
          });
      })
  );
});

// معالجة الرسائل من الصفحة الرئيسية
self.addEventListener('message', event => {
  const { data } = event;
  
  if (data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (data.type === 'GET_VERSION') {
    event.ports[0].postMessage({ version: CACHE_NAME });
  }
  
  if (data.type === 'CLEAR_CACHE') {
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => caches.delete(cacheName))
      );
    }).then(() => {
      event.ports[0].postMessage({ success: true });
    });
  }
});

// Background Sync (للمستقبل - حفظ البيانات أونلاين)
self.addEventListener('sync', event => {
  if (event.tag === 'background-sync') {
    console.log('🔄 Background sync triggered');
    // هنا ممكن نضيف sync للبيانات المحفوظة locally
  }
});

// Push Notifications (للمستقبل - إشعارات)
self.addEventListener('push', event => {
  if (event.data) {
    const data = event.data.json();
    console.log('📬 Push notification received:', data);
    
    const options = {
      body: data.body || 'إشعار جديد من najahipro',
      icon: '/icons/icon-192x192.png',
      badge: '/icons/badge-72x72.png',
      tag: 'najahipro-notification',
      requireInteraction: true,
      actions: [
        {
          action: 'open',
          title: 'فتح التطبيق'
        },
        {
          action: 'close',
          title: 'إغلاق'
        }
      ]
    };
    
    event.waitUntil(
      self.registration.showNotification(data.title || 'najahipro', options)
    );
  }
});

// النقر على الإشعار
self.addEventListener('notificationclick', event => {
  event.notification.close();
  
  if (event.action === 'open' || !event.action) {
    event.waitUntil(
      clients.openWindow('/')
    );
  }
});